# Python to Linux Web App on Azure
# Build your Python project and deploy it to Azure as a Linux Web App.
# Change python version to one thats appropriate for your application.
# https://docs.microsoft.com/azure/devops/pipelines/languages/python

trigger:  # 커밋과 같이 파이프라인을 트리거하는 커밋을 나타냅니다
- main   

variables:  # 변수화하는 항목

  # Azure Resource Manager connection created during pipeline creation
  azureServiceConnectionId: 'f831c4bb-fbf7-4f6e-b319-1b7ab27e83bd'

  webAppName: 'kkekgies'  # 배포를 진행할 target


  vmImageName: 'ubuntu-latest'  # 각 단계에는 파이프라인이 실행되는 하나 이상의 vm을 지정하는 요소가 있습니다. 기본적으로 요소에는 ubuntu vm에 대한 단일 항목만 포합됩니다. 


  environmentName: 'kkekgies'  # app service 이름


  projectRoot: $(System.DefaultWorkingDirectory)  # projectRoot가 build를 진행할 때 사용하는 environment이다.

  
  pythonVersion: '3.7' # app service 버전  

stages: #
- stage: Build
  displayName: Build stage
  jobs:
  - job: BuildJob
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: UsePythonVersion@0
      inputs:
        versionSpec: '$(pythonVersion)'
      displayName: 'Use Python $(pythonVersion)'

    - script: |   
        python -m venv antenv
        source antenv/bin/activate
        python -m pip install --upgrade pip
        pip install setup
        pip install -r requirements.txt     # root에 있는 requriement.txt를 기준으로 라이브러리를 설치합니다. 즉 pipeline을 실행하기 전에 작성해 두어야합니다.
      workingDirectory: $(projectRoot)  # 작업 위치이기도 하고 코드 위치이기도 하다.
      displayName: "Install requirements"  

    
    - task: ArchiveFiles@2   # 파일 보관 작업 
      displayName: 'Archive files'
      inputs:
        rootFolderOrFile: '$(projectRoot)'   # (필수) 보관 파일에 추가할 루트 폴더 또는 파일 경로를 입력(즉 코드를 가져올 위치를 입력해줘야함)
        includeRootFolder: false  # (필수) 이 옵션을 선택하면 루트 폴더 이름이 보관 파일 내의 파일 경로에 접두사로 추가됩니다.
        archiveType: zip   # 보관 형식
        archiveFile: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip  # (필수)파일 이름 지정
        replaceExistingArchive: true # (필수) 기존 보관 파일이 있는 경우 덮어쓸지 여부를 지정합니다. 그렇지 않으면 압축된 tar가 아닌 한 파일이 추가됩니다.

    - upload: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
      displayName: 'Upload package'
      artifact: drop

- stage: Deploy
  displayName: 'Deploy Web App'
  dependsOn: Build
  condition: succeeded()
  jobs:
  - deployment: DeploymentJob
    pool:
      vmImage: $(vmImageName)
    environment: $(environmentName)
    strategy:
      runOnce:
        deploy:
          steps:

          - task: UsePythonVersion@0
            inputs:
              versionSpec: '$(pythonVersion)'
            displayName: 'Use Python version'

          - task: AzureWebApp@1
            displayName: 'Deploy Azure Web App : kkekgies'
            inputs:
              azureSubscription: $(azureServiceConnectionId)  #  app Service가진 구독 서비스에
              appName: $(webAppName)  # 이 web Service에 배포를 하겠다는 것이다.
              package: $(Pipeline.Workspace)/drop/$(Build.BuildId).zip  # 파일 보관에 있는 코드를 가지고